// @ts-ignore
import { Args, Command, Flags } from "@oclif/core";
import * as path from "path";
import * as fs from "fs";
import { parse } from "yaml";

export default class Generate extends Command {
  static description = "Generate local types";

  static examples = [
    `$ oex hello friend --from oclif
hello friend from oclif! (./src/commands/hello/index.ts)
`,
  ];

  static flags = {
    config: Flags.string({
      char: "c",
      description: "Your local configuration file",
      default: "locala.yaml",
    }),
  };

  async run(): Promise<void> {
    const { args, flags } = await this.parse(Generate);

    const configPath = path.join(process.cwd(), flags.config);

    if (!fs.existsSync(configPath)) {
      this.logToStderr(`Config file not found at ${configPath}`);
      return;
    }

    const config = parse(fs.readFileSync(configPath, "utf8"));

    const output = "locala.d.ts";

    fs.writeFileSync(
      output,
      `// This file is generated by locala. Do not edit.
// Language: typescript
// Generated at: ${new Date().toISOString()}
// Source: ${configPath}

`,
    );

    fs.appendFileSync(
      output,
      `declare global {
  namespace Locala {`,
    );

    if (config.locales) {
      const locales = `type Locale = ${config.locales
        .map((locale: string) => `"${locale}"`)
        .join(" | ")}`;

      fs.appendFileSync(output, locales);
      fs.appendFileSync(output, "\n\n");
    }

    if (config.strings) {
      const strings: string[] = [];

      function getKeys(obj: any, prefix: string = "") {
        for (const [key, value] of Object.entries(obj)) {
          if (typeof value === "object") {
            getKeys(value, prefix + key + ".");
          } else {
            strings.push(prefix + key);
          }
        }
      }

      getKeys(config.strings);

      const mapped = strings.map((s) => `"${s}"`).join(" | ");

      fs.appendFileSync(output, `type LocaleStrings = ${mapped}`);
    }

    fs.appendFileSync(output, "\n\n}}");

    console.log(config);

    this.log(
      `hello ${args.person} from ${flags.from}!! (./src/commands/hello/index.ts)`,
    );
  }
}
